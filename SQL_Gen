##sqlQuery.py

# -*- coding: utf-8 -*-
"""
Created on Sun Jun 19 15:40:56 2022

@author: vinayr4
"""
import pandas as pd
import itertools

def main():
    appName='defaultApp'
    generateSQL(appName)
    #generateSQL("rightOfDatalakeDemo")

def generateSQL(inputAppName):
    #inputAppName='rightOfDatalakeDemo'
    #Read the Data model and ETL transformations into dataframes#
    df_dm=pd.read_csv(r"C:\Users\pawank4\OneDrive - kochind.com\New_Folder\DataModel.csv", header=0)
    df_etl=pd.read_csv(r"C:\Users\pawank4\OneDrive - kochind.com\New_Folder\ETL.csv", header=0)
    df_etl=df_etl[df_etl.appName==inputAppName]
    driving_table='int_invoice_hdr_plpvh'
    #print(df_etl.head(5))
    
    #Generate the SELECT clause of the SQL squery
    selectQuery=''
    for index,item in df_etl.iterrows():
        if index< max(df_etl.index):
            selectQuery=selectQuery+"\t"+item["Logic"] + ' AS '+ item["OutputField"]+","+"\n"
        else:
            selectQuery=selectQuery+"\t"+item["Logic"] + ' AS '+ item["OutputField"]+"\n"
 
    # Generate the WHERE clause of the SQL squery
    whereClause="where"
    """for index,item in df_etl.iterrows():
        if index<max(df_etl.index) and pd.isnull(item["Filter"])==False:
            whereClause=whereClause+"\t"+item["Filter"]+"\t"+ "and"+"\n"
        elif index==max(df_etl.index) and pd.isnull(item["Filter"])==False:
            whereClause=whereClause+"\t"+item["Filter"]+"\n"
    print(whereClause)"""
    where_list=[]
    for index,item in df_etl.iterrows():
        if pd.isnull(item["Filter"])==False:
            where_list.append(item["Filter"])
    for i in range(len(where_list)):
        if i<len(where_list)-1:
            whereClause=whereClause+"\t"+where_list[i]+"\t"+"and"+"\n"
        else:
            whereClause=whereClause+"\t"+where_list[i]+"\n"
    print(whereClause)

    # Generate the AGG function of the SQL squery
    groupbyClause="group by"
    group_list=[]
    for index,item in df_etl.iterrows():
        if pd.isnull(item["Group By"])==False:
            group_list.append(item["Group By"])
    for i in range(len(group_list)):
        if i<len(group_list)-1:
            groupbyClause=groupbyClause+"\t"+group_list[i]+"\t"+"and"+"\n"
        else:
            groupbyClause=groupbyClause+"\t"+group_list[i]+"\n"
    print(groupbyClause)

    # Generate the HAVING clause function of the SQL squery
    """havingClause="having"
    having_list=[]
    for index,item in df_etl.iterrows():
        if pd.isnull(item["Filter"])==False and item["Logic"] in item["Filter"]:
            having_list.append(item["Filter"])
    for i in range(len(having_list)):
        if i<len(having_list)-1:
            havingClause=havingClause+"\t"+having_list[i]+"\t"+"and"+"\n"
        else:
            havingClause=havingClause+"\t"+having_list[i]+"\n"
    print(havingClause)"""

    # Updating SELECT clause for group by of the SQL squery
    for elem in group_list:
        if elem not in selectQuery:
            selectQuery=selectQuery+","+"\t"+elem +"\n"

    selectQuery='SELECT \n'+selectQuery + 'FROM\n'
    print(selectQuery)  

    #Get the list of tables involved in ETL
    tableList=df_etl["InputTable"].unique()

    #Get all combinations of the relationships between involved tables
    #rel=list(itertools.combinations(tableList, 2))
    rel=[]
    rel=list(itertools.permutations(tableList, 2))

    #Generate the JOIN clause
    joinClause=''
    for index,val in enumerate(rel):
        #print(relation[0][0]+" LEFT OUTER JOIN "+relation[0][1]  +" ON "+ df_dm[(df_dm.Relationship==relation[0][0]+'-'+relation[0][1]))
        #print(relation[1])
        #print(val[0]+'-'+val[1])
        for index,item in df_dm.iterrows():
            #print("inside for loop==>"+item["Relationship"])
            if val[0]+'-'+val[1] == item["Relationship"] and index ==0:
                #print(  item["Table1"] +"\nLEFT OUTER JOIN \n" + item["Table2"] + " ON " + item["RelationshipJoin"])
                joinClause=joinClause+"\t"+item["Table1"] +"\nLEFT OUTER JOIN \n" +"\t"+ item["Table2"] + " ON " +"\t"+ item["RelationshipJoin"]
            if val[0]+'-'+val[1] == item["Relationship"] and index > 0:
                #print(  "\nLEFT OUTER JOIN \n" + item["Table2"] + " ON " + item["RelationshipJoin"])
                joinClause=joinClause+"\t"+"\nLEFT OUTER JOIN \n" +"\t"+ item["Table2"] + " ON " +"\t"+ item["RelationshipJoin"]+"\n"

    #Generate the final SQL
    selectQuery=selectQuery+joinClause+whereClause+groupbyClause
    return(selectQuery)

if __name__ == '__main__':
    main()

#print(selectQuery)
